name: Complete CI/CD Pipeline

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: self-hosted

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install dependencies
      run: npm ci

    - name: Generate Prisma client
      run: npx prisma generate

    - name: Build application
      run: npm run build

    - name: Login to Docker Hub
      run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

    - name: Build and push Docker image
      run: |
        TIMESTAMP=$(date +%Y%m%d-%H%M%S)
        IMAGE_NAME="${{ secrets.DOCKER_USERNAME }}/project-manager-api"
        
        docker build -t ${IMAGE_NAME}:latest -t ${IMAGE_NAME}:${TIMESTAMP} .
        docker push ${IMAGE_NAME}:latest
        docker push ${IMAGE_NAME}:${TIMESTAMP}
        
        echo "IMAGE_NAME=${IMAGE_NAME}" >> $GITHUB_ENV

    - name: Stop existing application
      run: |
        docker stop project-manager-api || true
        docker rm project-manager-api || true

    - name: Pull latest image
      run: docker pull ${{ env.IMAGE_NAME }}:latest

    - name: Run database migrations
      run: |
        docker run --rm \
          --env-file /home/ubuntu/.env \
          --network host \
          ${{ env.IMAGE_NAME }}:latest \
          npx prisma migrate deploy

    - name: Deploy application
      run: |
        docker run -d \
          --name project-manager-api \
          --restart unless-stopped \
          -p 3001:3001 \
          --env-file /home/ubuntu/.env \
          ${{ env.IMAGE_NAME }}:latest

    - name: Wait for startup
      run: sleep 15

    - name: Health check
      run: |
        echo "üîç Checking application health..."
        for i in {1..5}; do
          if curl -f http://localhost:3001/health; then
            echo "‚úÖ Deployment successful!"
            exit 0
          fi
          echo "‚è≥ Retry $i/5..."
          sleep 5
        done
        
        echo "‚ùå Deployment failed!"
        docker logs project-manager-api --tail 50
        exit 1

    - name: Cleanup old images
      run: |
        docker system prune -f || true